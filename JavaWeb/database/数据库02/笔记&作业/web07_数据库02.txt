一 约束条件
	为了保证数据的完整性 可以给列加上约束条件
	确保数据的完整性 = 在创建表的时候给表中添加约束
	完整性的分类:
		实体完整性
		域完整性
		引用完整性
	1.实体完整性
		实体:即表中的一行(一条记录)代表一个实体(entity)
		实体完整性的作用:标识每一行数据不重复
		约束类型:
			主键约束(primary key)
			唯一约束(unique)
			自动增长列(auto_increment)
		1.1主键约束
			每一个表中要有一个主键(可以是一列 也可以是多列联合组成) 
			特点:数据唯一 且不能为null

			/*主键约束
			第一种添加方式 在创建表的时候 直接添加主键约束*/
			CREATE TABLE a(
				id INT PRIMARY KEY,
				NAME VARCHAR(10)
			);
			INSERT INTO a VALUES(1,'abc');
			/*主键约束
			第二种添加方式 后补主键约束*/
			CREATE TABLE b(
				id INT,
				NAME VARCHAR(10)
			);
			ALTER TABLE b ADD PRIMARY KEY(id); -->括号里放的是要设置为主键的列名
			/*联合主键*/
			CREATE TABLE c(
				id INT,
				NAME VARCHAR(10),
				PRIMARY KEY(id,NAME);-->括号里放的是要设置为主键的列名
			);
			/*删除主键约束?*/
			ALTER TABLE 表名 DROP PRIMARY KEY;

		1.2 唯一约束(unique)
			特点:数据不能重复 值可以为null
			/*unique唯一约束*/
			CREATE TABLE c(
				id INT PRIMARY KEY,
				NAME VARCHAR(100) UNIQUE
			);
			ALTER TABLE 表名 ADD UNIQUE(列名);

		1.3 自动增长列(auto_increment)
			mysql -->auto_increment
			sqlserver --> idenitiy
			oracle --> sequence

			注意:给主键设置自动增长的时候 列只能是整数类型

			CREATE TABLE d(
				id INT PRIMARY KEY AUTO_INCREMENT,
				NAME VARCHAR(10)
			);
			可以设置自增起始值
	2.域完整性
		域完整性的作用:限制此单元格的数据正确,不对照此列的其他单元格
		域代表当前单元格
		域完整性约束:
			数据类型 非空约束(not null) 默认值约束(default)
			check约束 (mysql不支持) check(sex="男" or sex="女");
		2.1数据类型(数值类型,日期类型,字符串类型)
		2.2非空约束 not null
			ALTER TABLE 表名 MODIFY 列名 VARCHAR(20) NOT NULL;
		2.3默认值约束(default)
			/*默认约束 第一种添加方式*/
			CREATE TABLE e(
				id INT PRIMARY KEY AUTO_INCREMENT,
				NAME VARCHAR(10),
				age INT,
				sex VARCHAR(10) DEFAULT '男'
			);
			
			/*默认约束 第二种添加方式*/
			ALTER TABLE 表名 ALTER 列名 SET DEFAULT 默认值;
	3.引用完整性
		外键约束: foreign key
		用来约束表与表之间的关系

		建立外键关联 首先要确定 主 从关系
		外键一定是在从表中创建 从而找到与主表之间的联系

		例子: 国家表 --> 人民表  国家表国家名字-->人民表的国家名字
		      部门表 --> 员工表
		      学生表 --> 分数表

		外键必须满足的条件:
			1.至少涉及到两张表
			2.建立外键关系 对应列 必须具有相似的数据类型
			3.必须建立索引 pk fk
		注意: 外键可以有重复的 可以是空值

		创建外键的两种方式
			方式一.在创建表的时候 添加外键
			方式二.表已经创建好了 后续修改表的结构来添加外键

			方式一
			语法 [constraint 外键关系名] foreign key (从表的字段) references 主表名(主表的字段)

			[constraint 外键关系名] 可以不写 就是一个外键约束的名字 如果不写 系统会自己给
			foreign key 将从表中的字段作为外键字段
			references 映射到主表的字段


			CREATE TABLE stu2(
				sid INT PRIMARY KEY,
				sname VARCHAR(10) NOT NULL,
				sex VARCHAR(10) DEFAULT '男'
			);
			CREATE TABLE score(
				id INT PRIMARY KEY,
				score INT,
				ssid INT,
				CONSTRAINT fk_stu2_score FOREIGN KEY (ssid) REFERENCES stu2(sid)
			);
			方式二 表已经创建好了 
			alter table dept add primary key (deptno);
			alter table emp add foreign key (deptno) references dept(deptno);
			DELETE FROM dept WHERE deptno = 20;
		注意:
			如果两张表有了外键关联 并且从表中正在使用主表数据 
			那么就不能随便删除主表中的数据
			必须先删除从表中的数据 再删除主表的数据
	
			SHOW CREATE TABLE 从表名;//查询建表语句
			删除外键 
			ALTER TABLE 从表名 DROP FOREIGN KEY 外键关系名;
二 表与表之间的关系
	三种关系
		1.一对一 1vs1
		2.一对多(多对一) 1 vs N
		3.多对多 N vs N
三 多表联合查询****
	多表连接简介
		在关系型数据库中 一个查询往往会涉及到多表,多张表如何进行联合查询 就成为了学习sql 查询语言的关键
		如果单纯的只是将数据存放在一张表中 那么这个表存在大量冗余数据 这种数据库设计是不合理的

	1.合并结果集
		union
		union all
		作用:合并结果集 把两个select语句的查询结果合并到一起

		CREATE TABLE a(
			aname VARCHAR(10),
			aage INT
		);
		CREATE TABLE b(
			bNAME VARCHAR(10),
			bage INT
		);
		INSERT INTO a VALUES('a',1),('b',2),('c',3);
		INSERT INTO b VALUES('d',1),('e',2),('c',3);
		/*union*/
		SELECT * FROM a UNION SELECT * FROM b; // 去除重复数据
		SELECT * FROM a UNION ALL SELECT * FROM b; //不去除重复数据

		要求:被合并的两个结果 :列数/列类型 必须相同
	2.连接查询(重要)
		连接查询 就是求多个表的乘积 例如 a表连接b表 那么查询出的结果就是 a表*b表

		连接查询 -->笛卡尔积(在sql中的实现方式交叉连接 cross join)
		所有的连接方式 都会先生成临时笛卡尔积表 然后加上限制条件 才会有实际查询意义

	  join 就是把多个表连成一个表的手段
	  多表查询 分为 内/外连接

	  内连接 [INNER] join...on
	  外连接 [OUTER] join...on
		左外连接 Left[OUTER] join
		右外连接 Right[OUTER] join
		全外连接 Full join (Mysql 不支持)
	  自然连接 Natural join
		

	内连接
		SELECT * FROM 表1,表2 WHERE 表1.相同列 = 表2.相同列
		可以给表设置别名 然后在引用列的时候 使用别名调用即可
		SELECT e.ename,e.job,d.dname,d.loc FROM emp e,dept d WHERE e.deptno = d.deptno

		以上连接语句就是内连接,但是不是sql标准中查询方法,可以理解为方言

		有两种 隐式(没有 inner join 上面那种)和显式(有 inner join)
		隐式:
			SELECT e.ename,e.job,d.dname,d.loc FROM emp e,dept d WHERE e.deptno = d.deptno
		
		显式: [inner]可省略 不使用 where 使用 on
			SELECT e.ename,e.job,d.dname,d.loc FROM emp e [INNER] JOIN dept d ON e.deptno = d.deptno
		
		特点: 查询结果必须满足条件
	外连接
		外连接不但返回符合连接和查询条件的数据行,还返回不符合条件的一些行
		外连接分为三种
			左外连接 Left[OUTER] join
			右外连接 Right[OUTER] join
			全外连接 Full join (Mysql 不支持)
		左外连接 Left[OUTER] join
			返回左表中不符合连接条件 
		右外连接 Right[OUTER] join
			返回右表中不符合连接条件 

		SELECT * FROM emp e LEFT [OUTER] JOIN dept d ON e.deptno = d.deptno;
		左连接是先查询出左表(即以左表为主) 然后查询右表,右表中满足条件的显示 不满足条件的显示为null
		SELECT * FROM emp e RIGHT [OUTER] JOIN dept d ON e.deptno = d.deptno;
		右连接是先查询出右表中所有记录,然后查询左表,左表中满足条件显示 不满足条件的显示为null

		/*练习 查询出 员工姓名 工作 部门 部门所在地 当部门为采购部的不显示 当名字为smith的不显示*/
		SELECT * FROM emp LEFT JOIN dept ON emp.deptno = dept.deptno AND dept.dname !='采购部' 
		WHERE emp.ename !='smith'
		/*
			1.笛卡尔积 select * from emp cross join dept
			2.应用 on 筛选器 emp.deptno = dept.deptno AND dept.dname !='采购部' 
			3.添加外部行 outer join起作用 如果是left join会以左表为保留表
				如果是 right join 看右侧表
				所谓的外部行 就是保留表中的行 即第二步on过滤掉了一些 在这里会添加上
			4.where过滤器 过滤的是left join 左表部分的数据
		*/
		总结:
		1.如果 sql 用的是left join,on后面的条件 对left表没有作用,只对right表起过滤作用
			where 语句可以对left的表有过滤作用
		2.如果 sql 用的是right join,on后面的条件对right表没有作用,只对left表起过滤作用
			where 语句可以对right的表右过滤作用

		数据库在通过连接两张或多张表返回数据的时,都会生成一张中间的临时表,然后再将这张临时表的数据返回给用户
		on条件与where条件的区别
			在使用left join时,on和where区别如下
			1.on条件是在 生成临时表 时 使用的条件 它不管on 的条件是否为真 都会返回左边表的记录
			2.where条件是在 生成临时表 后 ,再对临时表进行过滤 如果条件不为真 就全部过滤
	自然连接 Natural join
		自然连接无需你去给出主外键等式 它会自动找到这一等式
		两张连接的表中 名称 和 类型 完全一致的列 作为条件

		SELECT * FROM emp NATURAL JOIN dept;
		SELECT * FROM emp NATURAL LEFT JOIN dept;
		SELECT * FROM emp NATURAL RIGHT JOIN dept;
	总结:
		连接查询时sql查询的核心 按照实际需求来选择对应的连接类型,如果选择不当
		非但不能提高效率 反而会带来一些逻辑错误或者性能下降
		选择依据:
		1. 查两表关联列相等的数据用 内连接
		2. left表是right表的子集 用 右外连接
		3. right表是left表的子集 用 左外连接
		4. right和left彼此之间有交集 但是互不为子集 使用 用全外链接
 子查询(非常重要)
	一个select语句中 包含另一个 完整的 select语句
	子查询 就是 嵌套查询 
	子查询出现的位置:
		where 后 :作为查询条件的一部分
		from 后 : 作为表
	当子查询出现在where后 作为条件时,还可以使用如下关键字(很少用)
		any任意一个   --->min
		all全部       --->max
	子查询结果集的形式
		> 单行单列 (用于条件)
		> 单行多列 (用于条件)
		> 多行单列 (用于条件)
		> 多行多列 (表)

	1.子查询形式为 单行单列
	2.子查询形式为 单行多列
	3.子查询形式为 多行单列
		多行子查询:是指返回多行数据 在where使用多行子查询时,要用 in/all/any来连接

		/*练习 工资高于  WARD 的员工*/
		SELECT sal FROM emp WHERE ename='ward';
		SELECT ename,sal FROM emp WHERE sal > (SELECT sal FROM emp WHERE ename='ward');
		/*练习 查询与 SCOTT 同一部门的员工*/
		SELECT ename FROM emp WHERE deptno = (SELECT deptno FROM emp WHERE ename ='scott' );
		/*练习 查询工资比 7654高 与 7788从事相同工作的全部员工信息*/
		SELECT * FROM emp WHERE sal>(SELECT sal FROM emp WHERE empno=7654) AND 
		job=(SELECT job FROM emp WHERE empno = 7788)
		/*练习 查询工作和工资与MARTIN 完全相同的员工信息*/
		SELECT job,sal FROM emp WHERE ename = 'MARTIN';
		SELECT * FROM emp WHERE (job,sal) IN (SELECT job,sal FROM emp WHERE ename = 'MARTIN');
		/*练习 查询有2个以上直接下属的员工信息*/
		SELECT mgr FROM emp GROUP BY mgr HAVING COUNT(mgr)>=2;
		SELECT * FROM emp WHERE empno IN (SELECT mgr FROM emp GROUP BY mgr HAVING COUNT(mgr)>=2);
		/*练习 工资高于 30 号部门所有人的员工信息*/
		SELECT MAX(sal) FROM emp WHERE deptno = 30;
		SELECT * FROM emp WHERE sal>(SELECT MAX(sal) FROM emp WHERE deptno = 30);
		SELECT sal FROM emp WHERE deptno = 30;
		SELECT * FROM emp WHERE sal> ALL(SELECT sal FROM emp WHERE deptno = 30);

	in 和 exists 区别


	/*会员表 订单表 1 vs N*/
		/*in*/
		SELECT user_id FROM ordertable
		SELECT * FROM usertable WHERE id IN(SELECT user_id FROM ordertable);
		/*
		执行流程
			1.SELECT user_id FROM ordertable
			2.查询到的结果和原有usertable 表 做一个 笛卡尔积
			3.where id in 条件 将结果进行筛选
				usertable.id 和 ordettable.user_id 是否相等 相等保留 不想等删除
		*/
		/*exists*/
		SELECT * FROM usertable WHERE EXISTS 
		(SELECT user_id FROM ordertable WHERE usertable.id = ordertable.user_id );
		/*
		执行流程
			1.SELECT * FROM usertable
			2.根据表的每一条记录 执行下面的语句 依次去判断where后面的条件
			EXISTS 
			(SELECT user_id FROM ordertable WHERE usertable.id = ordertable.user_id );
			如果匹配 返回true 否则返回false 当匹配结束 只保留返回true的数据
		*/

		select * from 表1 where id in (select id from 表2);
			查询过程 相当于一个双重for循环
				for(int i=0 ;i<表1.length;i++){
					for(int j=0 ;j<表2.length;j++){
						if(表1[i].id = 表2[j].id){
							判断 数据是否存在
							 break;
						}
					}
				}
			如果 表1有1000条记录 表2有10000条记录 最多遍历 1000*10000
			如果 表1有10000条记录 表2有100条记录 最多遍历 10000*100 

		select * from 表1 where exists(select id from 表2 where 表1.id = 表2.id);
			exists
				for(int i=0;i<表1.length;i++){
					if(exists(表1[i].id)){
						//select id from 表2 where 表1.id = 表2.id
						//判断是否有记录返回
					}
				}
			如果 表1有1000条记录 表2有10000条记录 最多跑了1000次去判断
			如果 表1有1000条记录 表2有10000000条记录 exists 1000次 
			exists 执行了 表1.length次
		结论:
			in() 适合 表2比表1数据小的情况下
			exists() 适合 表2比表1数据大的情况下
			当 表1和表2的数据一样大时, in 与 exists效果差不多 可以任意选择
	4 多行多列 (表)
		form后面

		/*查询员工编号为 7788 的员工姓名 部门 部门地址*/
		SELECT e.ename,d.dname,d.loc 
		FROM emp e,dept d 
		WHERE e.deptno = d.deptno AND empno = 7788;

		SELECT e.ename,d.dname,d.loc 
		FROM emp e,(SELECT deptno,dname,loc FROM dept) d 
		WHERE e.deptno = d.deptno AND empno = 7788;
		/*求7369员工 姓名 经理姓名 经理编号*/
		SELECT e1.empno,e1.ename,e2.ename,e2.empno
		FROM emp e1,(SELECT empno,ename FROM emp) e2
		WHERE e1.mgr = e2.empno AND e1.empno = 7369;
				
四 函数