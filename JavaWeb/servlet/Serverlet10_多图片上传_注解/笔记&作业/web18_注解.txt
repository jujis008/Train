注解 Annotation

1.什么是注解
	注解也叫元数据
	JDK1.5以后版本引入的一个特性
	与类/接口/枚举是在同一个层次的 它可以声明在包/类/字段/方法/局部变量/方法参数等的前面
	用来对这些元素进行说明,注释

	作用:
		1.编写文档:通过代码里的标识的元数据生成文档 doc文档
		2.代码分析:通过代码里的标识的元数据来对代码进行分析 反射
		3.编译检查:通过代码里的标识的元数据来对代码进行基本的编译检查 @override
	java的注解 从名字看是注解 
		解释 注释

web阶段 用注解代替web.xml配置文件使用 web3.0/javaEE6
	
2.自定义注解的使用
	1.JDK的三个基本注解
		1.@Override:检查子类确实是覆盖了父类的方法
		2.@Deprecated:说明已经过时了(方法过时)
		3.@SuppressWarnings({"unused","deprecation"}):抑制程序中的警告
		unused 未使用
		deprecation 已过时
		rawtypes 泛型警告
		all 全部警告
	2.自定义注解(肉体)
		注解的本质是接口
		但是为了区分普通接口 和 自定义注解
		声明一个注解:
			public @interface MyAnnotation{}

		@--->MyAnnotation extends java.lang.annotation.Annotation接口
	
		注解中的属性类型可以有哪些?
			1.基本数据类型 四类八种
			2.String
			3.枚举类型
			4.注解类型
			5.Class类型
			6.以上类型的一维数组类型

		注解中的属性 叫做 属性方法
			
3.元注解
	只能用在注解上的注解叫做元注解 即 用于修饰注解的注解
	Document
		指示某一类型的注释将通过 javadoc 和类似的默认工具进行文档化。
		给自定义注解添加该元注解 
		那么使用了自定义注解的类的API文档中就会出现自定义注解
	Inherited 
		作用 说明该注解可以被继承下去
	Retention
		指示注释类型的注释要保留多久
		作用 改变自定义注解的存活范围
		CLASS 编译器将把注释记录在类文件中，但在运行时 VM 不需要保留注释。 
		RUNTIME 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。 
		SOURCE 编译器要丢弃的注释。 

	Target
		指示注释类型所适用的程序元素的种类。如果注释类型声明中不存在 Target 元注释，
		则声明的类型可以用在任一程序元素上
		作用:指定该注解能用在什么地方
		ANNOTATION_TYPE 
			  注释类型声明 
		CONSTRUCTOR 
			  构造方法声明 
		FIELD 
			  字段声明（包括枚举常量） 
		LOCAL_VARIABLE 
			  局部变量声明 
		METHOD 
			  方法声明 
		PACKAGE 
			  包声明 
		PARAMETER 
			  参数声明 
		TYPE 
			  类、接口（包括注释类型）或枚举声明 

4.反射获取注解(灵魂)
	java.lang.reflect.AnnotatedElement该接口允许反射性地读取注解。

	 <T extends Annotation> T getAnnotation(Class<T> annotationClass) 
		  如果存在该元素的指定类型的注解，则返回这些注解，否则返回 null。 
	 Annotation[] getAnnotations() 
		  返回此元素上存在的所有注解。 
	 Annotation[] getDeclaredAnnotations() 
		  返回直接存在于此元素上的所有注解。 
	 boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) 
		  如果指定类型的注解存在于此元素上，则返回 true，否则返回 false。 

	Class Method Field Constructor都实现了AnnotatedElement接口

	案例:
		
		颜色 ComputerColor  BLUE BLACK RED
		品牌 ComputerBrand  苹果 Dell
		产地 ComputerFrom
		     id 型号
		     type 港版/国行
		     address 产地 富士康

		电脑Apple

		解析注解

5.Servlet中的几个常用注解(Servlet/Filter)

	Servlet3.0之后增加了对注解的支持 可以使用注解去替代web.xml配置文件
		Servlet3.0/JDK1.6/Tomcat7+
	
	web.xml 和 注解配置的优缺点

	web.xml 优点: 可配置 不用改源代码 
		缺点: 不直观 开发效率低

	注解    优点: 直观 开发效率高
		缺点: 改源代码

	1.@WebServlet -->Servlet的注解
		name			等价于 <servlet-name>标签
		value
		urlPatterns		等价于 <url-pattern>标签
		localOnStartUp
		initPararns		等价于 <init-param>标签
		desciption

	2.@WebFilter -->Filter的注解

		注意 如果用web.xml配置 会按照书写顺序执行过滤器
		     如果用注解配置 会按照文件名字母排序
			     UserLogin 登录检查
			     AccessLod 日志
			     会先找 A --> 以此类推
	