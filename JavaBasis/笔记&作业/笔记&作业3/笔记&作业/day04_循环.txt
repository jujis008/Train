二.循环结构
	重复的行为 反复出现 就可以使用循环 来处理

	while循环
	do-while循环
	for循环

1.while循环
	语句格式:
		初始化语句;
		while(判断条件语句){
			循环体语句;
			控制条件语句;//不一定要写 不写就死循环 没有跳出循环的可能性了
		}

	执行流程:
		1.执行初始化语句
		2.执行判断条件语句 看其返回值是true 还是false
			如果是 true: 就继续执行 循环体中的内容
			如果是 false: 就结束循环
		3.执行循环体语句
		4.执行控制条件语句
		5.回到2继续
2.do-while循环
	语句格式:
		初始化语句;
		do{
			循环体语句;
			控制条件语句;

		}while(判断条件语句);

	执行流程:
		1.执行初始化语句
		2.执行循环体语句
		3.执行控制条件语句
		4.执行判断条件语句
			如果是true 就继续循环执行
			如果是false 就结束循环
		5.回到2继续
3.for循环
	语句格式:
		for(初始化语句;判断条件语句;控制条件语句){
			循环体;
		}
	执行流程:
		1.初始化语句
		2.判断条件语句
			true --> 循环体
			false -->结束循环
		3.执行循环体
		4.控制条件语句
		5.回到2继续
	//i++ --> i = i+1 是在内存中申请了另一片区域 存了一下i+1的值 然后赋给i
	//++i --> 是直接给i这个变量赋值 效率高一点

	注意事项:
		1.判断条件语句 无论简单还是复杂 结果必须是boolean
		2.循环体语句如果是一条语句,花括号可以省略,如果是多条语句,就不可以省略 建议永远不要省略

for,while和do-while三种循环的异同点
		
		1.do-while循环至少执行一次循环体
		2.for循环和while循环 初始化变量的作用域不同 
			for循环只在循环体内部可以使用
			while在方法体中可以继续使用
避免死循环:
	while(true){
	
	}
	for(;;){
	
	}

循环的嵌套(for多重循环)

	循环嵌套:
		第一层循环 相当于一本书的第一页
		第二层循环 相当于一页中的每一行

		for(int j = 0;j<10;j++){
			for(int i=0;i<4;i++){
					
			}
		}
		