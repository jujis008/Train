一.线程间通信
	操作同一个资源 多个线程 操作的动作不同

	等待唤醒机制
		wait() 等待 进入冻结状态 如果无人唤醒 就一直等待
		notify() 唤醒
		notifyAll() 唤醒所有
		sleep(long) 睡眠 自然醒来
	输入线程进来 先判断标记 如果标记是false 就输入 输入后 将标记改为true
	输入线程第二次进来 发现标记是true 等着 等待输出线程执行完毕 将它唤醒 继续执行

	输出线程进来 先判断标记 如果标记是true 如果是 true 就输出 输出后 将标记改为false 
	并且 唤醒输入线程
	输出线程第二次进来 发现标记是false 就等着 等待输入线程执行完毕 将它唤醒 继续执行

	input线程 执行后 唤醒output线程 自己等待
	output线程 执行后 唤醒input线程 自己等待
	始终保持着 一个等待执行 一个唤醒执行的状态

	例如:两个人吃一碗饭 交替着吃
		我吃的时候你别动 你吃的时候我不动

wait() notify() notifyAll()
	都用在同步中 因为要对持有监听器(锁)的线程进行操作
	所以要使用在同步中 因为了只有同步 才具有锁
	因为 等待 和 唤醒 必须是同一个锁

为什么 wait() notify() notifyAll() 这三个方法是Object类的方法
	因为锁 可以是任意对象 所以可以被任意对象调用的方法 定义在 Object类中

二.生产消费模式
	先有产品 才能消费

			//线程池等待 先进去的先被唤醒
		/*
			改成while之后 是让所有的线程 醒了之后都判断标记 就不会出现 生产两个 消费一个的情况
			用了 while 之后的结果 造成 全部等待的局面
			需要用 notifyAll() 唤醒所有的等待线程 
			notify() 是唤醒线程池中第一个 所以可能会唤醒 本方线程
			notifyAll(); 全部唤醒 循环判断标记 就是到什么时候该懂 什么时候不动了
		*/
	分析:

		假设 生产者获得cpu执行权
		t1 t2
		t1 判断标志位 false 赋值 打印一次 改成true notify()
		t1 有可能还持有cpu执行权 判断标志位 true t1 wait() 放弃执行权

		t2/t3/t4 都有可能抢到执行权

		如果 t2 抢到执行权 判断标志位 true t2 wait() 放弃执行权

		如果 t3 抢到执行权 判断标志位 !true 打印  改成false notify() t1 t1 有资格 但不一定有执行权

		(注意:线程池等待 先进去的先被唤醒)

		t3 又抢到了执行权 !false t3 wait() t3放弃资格
		t4 抢到了	  !false t4 wait() t4放弃资格

		t1 活了 t1 count++ 打印一次 改成 true notify() 唤醒 t2 t2有资格
		t1 再进来 判断标志是 true wait()
		这时候活着的只有 t2

		t2 执行了 不会判断标志位 因为之前是 wait() 直接向下执行代码
			count ++ 前一个t1生成的数 被覆盖了
		修改标记 唤醒 t3
		t3 活了 打印一次 打印的是t2的值
		
		如何才能在每次醒来的时候都判断标记呢?

		if 改成 while 判断多次 --> t2醒来 判断标记 true  wait()
		改成while让每次醒来 都判断 不管是谁醒来 都要判断 会造成 全部等待的局面
		没有线程可以启动notify() 
		notifyAll() 全部唤醒 唤醒了全部之后 循环判断标记 就知道是哪个线程该启动了



三.Thread类中的其他方法

1.停止线程
	public void interrupt()
	如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，
	或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，
	则其中断状态将被清除，它还将收到一个 InterruptedException。 

	定义循环结束标记 
		因为线程运行代码一般都是循环 只要控制了循环 线程就能被停止
	interrupt() 中断方法
		该方法是结束线程的冻结状态 使线程回到运行状态中来
	注意: stop() 方法已经过时不再使用 是强行停止 不管什么情况 线程都会被干掉 

	如何停止线程?
		run方法结束
	interrupt()方法 是 将线程从 冻结状态 强制 转成 运行状态

2.守护线程
	void setDaemon(boolean on) 
	设置一个线程为守护线程 那么该线程就不会单独执行 当其他非守护线程都执行结束后 守护线程自动结束
	后台线程 当线程被标记为守护线程 开启后 和前台线程一样 都抢夺cpu的执行权
	但是 结束不一样 当所有前台线程都结束后 后台线程会自动结束

		/*
			注意:
				1.在启动线程前设置
				2.前台线程结束了 所有后台线程就结束了
			例如:
				圣斗士星矢 守护雅典娜
		*/
 
3.加入线程
	join() 插队 当前线程暂停 等待指定的线程执行结束后 当前线程再继续
	join(long) 可以等待指定的毫秒之后继续

	// 插队 想要执行权 那么被插队的线程放出执行权 让 插队的先执行
	// join 可以用来临时加入线程执行
4.设置线程的优先级
	setPriority()
	public final void setPriority(int newPriority)
	线程的优先级 1-10
	默认线程的优先级 5 
	toString() 方法 返回该线程的字符串表示形式，包括线程名称、优先级和线程组。

	当修改了优先级 抢夺cpu 的频率会发生改变 

	static int MAX_PRIORITY 
          线程可以具有的最高优先级。 
	static int MIN_PRIORITY 
          线程可以具有的最低优先级。 
	static int NORM_PRIORITY 
          分配给线程的默认优先级。 

5.礼让线程
	public static void yield() 让位 稍微减缓线程执行频率
	让线程的使用率 变得更平均
计时器
Timer()
TimerTask