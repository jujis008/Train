网络编程
一 概述
	什么是网络编程
		就是用来实现网络互连的不同计算机上运行的程序间 可以进行数据交换
	网络编程三要素
		IP地址 端口号 传输协议

		IP地址
				每个设备在网络中唯一标识
				每个网络终端 在网络中都有一个独立的地址 
				我们在网络中传输数据就是使用这个地址
			ipconfig 查看本机IP地址
				ipconfig -all
			ping 测试连接
			本地回环地址/本地回路地址 127.0.0.1-->localhost 本机
			广播地址 255.255.255.255

			IPv4:4个字节组成 4个0-255 大概42亿
				30亿都在北美 亚洲4亿 2011年初已经用完了
				电信厂商 九龙坡区 划分为一个区域 在这个区域 只有一个公网地址
				下面用的都是局域网
			IPv6 8组 每组4个16进制数
		端口
			给不同的程序设置了一个不同的标识
			-->逻辑端口 不是物理端口(网线)
			netstat -nao
			端口号 0 - 65535 任选 通常0-1024一般被系统保留了 尽量不用 不然可能会出现冲突

			常用端口号:
				mysql:3306
				oracle:1521
				web:80
				tomcat:8080
				qq: 4000
				feiq 2425
			端口号都可以改
		通信协议
			定义通信规则 这个规则就称为协议
			国际组织定义了一个通用的网络通讯协议 TCP/IP(包括局域网和广域网)
			局域网 cs 
			广域网 浩方
		网络通讯协议
			联网的终端设备为了更好的进行信息的交互 要遵守一套规则
			网络有七层协议
				应用层		web
				表示层
				会话层
				传输层		UDP TCP
				网络层		IP
				数据链路层
				物理层
			数据传输
				首先会从客户端 应用层开始向下一层层打包 
				(包里存储了很多资料 包括ip 端口 主机名)
				然后 发送到服务器端 再一层层 拆包到应用层		

二 Socket套接字 网络编程-->就是Socket编程
	概述:
		网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能标识的标识符套接字
		通信的两端都有Socket
		网络通信其实就是Socket间的通信
		数据在两个Socket间通过IO流传输
		Socket在应用程序中创建 通过绑定机制与驱动程序相关联
		告诉自己所对应的IP和port
		码头 港口之间想要通信怎么办 先有码头 才会有船
			我的电脑装了qq 你的没装 不能通讯
三 UDP--用户数据报协议
	面向无连接 数据不安全 速度快 不区分客户端与服务端
		面向无连接
			快递寄包裹 拿着饼干去快递 
			封包-->地址:端口-->地址可能写错-->不管地址有没有 就是发出去
			对讲机
	有限制 一次发的包 不能超过64k
		程序中 网络视频会议 实时更新 求速度 不求质量 可以丢失一点
		卡几个马赛克
		桌面共享
四 TCP--传输控制协议
	面向连接(三次握手),数据安全,速度略低 分为客户端和服务端
	三次握手:客户端向服务端发起请求 服务端响应请求 传输数据
		打电话 对方突然挂断了 你还继续说...数据丢失

		例如:
			A说:哥们在吗
			B回答:我在呢老师
			A回答:奥 我知道了你在了
InetAddress IP地址类
	此类表示互联网协议 (IP) 地址。 
应用
	1.UDP:
		java.net 类 DatagramSocket 此类表示用来发送和接收数据报包的套接字。 
		 void receive(DatagramPacket p) 从此套接字接收数据报包。 
		 void send(DatagramPacket p)  从此套接字发送数据报包。 
		 java.net 类 DatagramPacket 此类表示数据报包。 
			DatagramPacket(byte[] buf, int length) 
	思考
		UDP聊天
		一个进程
		发送端和接收端应该在一个窗口中
		发送的时候可以接收 接收的时候可以发送 一段代码 同时运行 多线程技术
		不是开两个进程 而是一个进程里面包含多个线程来解决这个问题

		编写一个聊天程序
		一个线程控制收 一个线程控制发 这两部分需要同时进行 收和发的动作是不一致的
		需要两个run方法 而且这两个run 方法在不同类中

	2.TCP:
		客户端和服务端
		Socket 客户端
		ServerSocket 服务端
		建立客户端和服务端 通过Socket中IO流进行数据的传输

		1.客户端
			创建Socket 去连接服务端(指定 ip地址,端口号)通过ip和端口号找到服务端
			调用Socket 中的 getInputStream() 和 getOutputStream()方法与服务器相连接 获取和发送数据
			输入流可以读取服务器端输出流写出的数据
			输出流可以写出数据到服务端的输入流

			Socket(InetAddress address, int port) 
			如果用无参的构造函数 Socket() 需要调用connect()方法 连接服务端 

		2.服务端
			创建ServerSocket(需要指定端口号)
			调用ServerSocket的 accept()方法 接收一个客户端请求 得到一个Socket
			调用Socket的 getInputStream() 和 getOutputStream()方法 获取 和 发送
			输入流可以读取客户端输出流写出的数据
			输出流可以写出数据到客户端的输入流

			ServerSocket(int port) 
		  void shutdownInput() 
			  此套接字的输入流置于“流的末尾”。 
		 void shutdownOutput() 
			  禁用此套接字的输出流。 







