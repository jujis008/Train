Collection集合的子接口

Set集合
	Set集合的特点:
		最简单的一种集合
		无序(存取不一致) 无序不代表随机
		不可重复
		无索引
	Set中存入的是对象的引用,没有重复对象
	Set集合的方法和Collection集合的方法一致
HashSet
	按照哈希算法来存取集合中的对象 存取速度比较快

	当程序向HashSet中 add()的一个对象的时候,
	先用hashCode方法计算出该对象的哈希码
		哈希码不一致 添加 哈希码一致 不添加 相同对象不添加
	然后用equals判断对象的属性是否一致
		比较结果为false就添加 true就不添加 不同对象添加

	基本数据类型包装类/String 已经重写了hashCode 和 equals 会自动比较

	LinkedHashSet
		特点:
			1.有序(存取一致)
				是Set集合中唯一一个能保证怎么存就怎么取的集合对象
			2.排重
			3.底层是双向链表
		HashSet的方法怎么用 LinkedHashSet就怎么用
TreeSet
	二叉树 实现了SortedSet接口 能够对集合中对象进行排序

	特点:
		1.排序的(升序) 自然排序 根据ASCII表大小排序
		2.排重
		3.无序(存取不一致)
		4.底层是一个二叉树(左序中序右序)
		5.只能存储同一种类型 才能排序 不然就会出现转换异常
自定义实现类 如何比较
	方式一	实现 Comparable 接口 重写 comparaTo方法
		这种方式也称为元素的自然排序 或者是默认顺序排序
		int compareTo(T o)
			比较此对象与指定对象的顺序。
			如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。 
		负整数 此对象 < 指定对象
		0      此对象 == 指定对象
		正整数 此对象 > 指定对象

	方式二	Comparator比较器

		TreeSet(Comparator<? super E> comparator) 
		接口 Comparator<T>
			int compare(T o1, T o2) 
			比较用来排序的两个参数。
			根据第一个参数小于、等于或大于第二个参数分别返回负整数、零或正整数。

		在实际工作中 尽量不要修改源码 使用Comparator比较器 比较个性的东西
	区别:
		TreeSet构造函数未传入比较器,默认按照类中的Comparable比较 如果不写 就报错
		TreeSet传入Comparator比较器 就优先按照Comparator比较
总结:
遍历集合的时候
	List:
		普通for循环 使用get()获取元素
		调用 iterator() hasNext() next()获取元素
		增强for循环 只要可以使用Iterator 的类都可以使用
		
		Vector 集合用的是 Enumeration
	Set:
		调用 iterator()
		增强 for

普通for循环 迭代器 增强for循环 是否可以在遍历的过程中删除元素?

	普通 for 可以
	迭代器 自己的remove() 可以
	增强 for 不可以 

 




