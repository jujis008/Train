一.Object类
	java.lang.Object
	类 Object 是类层次结构的根类。每个类都使用 Object 作为超类。所有对象（包括数组）都实现这个类的方法。 
	boolean equals(Object obj) 
		java认为所有的对象都具备可比性 都能比较是否相同 只要是实体 就能比

	== 和 equals的区别
		== 是一个比较运算符 可以比较基本数据类型 也可以比较引用数据类型 但是引用数据类型比较的是地址值
		equals是一个方法,只能比较引用数据类型,所有的对象都具备equals方法 因为他们都继承自Object类
			如果没有重写Object类中的equals 那么比较的是地址值
			重写之后 比较对象中的属性
	注意:
		当此方法被重写时,通常有必要重写hashCode方法 以维护hashCode方法的常规协定,
		该协定声明相等对象必须具有相等的哈希码
	int hashCode() 
		返回该对象的哈希值,默认情况下,该方法会根据对象的地址来计算
		不同对象的hashCode()一般来说不会相同.但是同一个对象的hashCode()肯定相同
		//重写了equals方法 就将hashCode方法也重写

	equals和hashCode间的关系:
		1.如果两个对象相同(即 用equals比较返回true),那么他们的hashCode 值一定相同
		2.如果两个对象的hashCode相同,他们并不一定相同(即 用equals比较返回true) -->集合要讲

		先判断 hashCode是否相同 如果不同 那就比没有必要再用equals去比较 减少了equals的使用次数
	String toString() 
		java认为所有对象不仅具备比较性 还能以字符串的形式打印出来
		返回该对象的字符串表示

二.内部类
	将一个类定义在另一个类里面,那么里面的那个类就叫内部类(内置类 嵌套类)
	1.成员内部类
		1.内部类可以直接访问外部类中的成员,包括私有成员
			是因为内部类中持有了一个外部类的引用
			外部类名.this.
		2.外部类中可以直接创建私有的内部类对象 调用成员
		  内部类非私有 外部其他类要访问内部了中的成员 必须要建立内部类对象
			外部类名.内部类名 对象名 = 外部类对象.内部类对象
		3.当类在成员位置时(是内部类的时候) 就可以被成员修饰符修饰
			比如: private
			      static
	2.静态内部类
		被static 修饰的内部类
	3.局部内部类
		定义在成员方法中的类
		1.不可以被成员修饰符修饰
		2.可以直接访问外部类中的成员,因为还持有外部类中的引用
		3.不可以访问它所在的局部中的变量,只能访问被final修饰的局部常量
			jdk 1.8 新特性 可以不用写final 关键字 但是 局部变量本身还是常量 不能被改变
		  为什么?
			方法 进栈内存 用完了 就弹栈了 这个局部变量也消失了 
			但是 局部内部类对象 还没消失 还想用这个变量 就没有了
			被final 修饰的变量 会存储在常量池中 就算方法弹栈 常量也依然存在 可以继续使用

			栈内存 先进后出 压栈 和 弹栈的过程

	4.匿名内部类
		匿名内部类 其实 就是内部类的简写格式
		//内部类 写成 匿名内部类 必须有前提条件
		/*	内部类 必须是继承一个类 或者实现接口
		 *  格式: 
		 *  	new 类名或者接口名(){
		 *  		重写方法
		 *  	}.方法名();
		 *  匿名对象 对方法的调用 只能调用一次 想要调用其他的必须重新建立匿名对象来调用
		 *  匿名内部类中定义的方法 最好不要超过3个
		 * */


一.基本数据类型包装类
	将基本数据类型 包装成引用数据类型
	因为 引用数据类型 可以调很多方法
	基本数据类型  默认值 包装类型  包装类型的默认值
	byte            0     Byte        null
	short		0     Short       null
	int		0     Integer     null
	long            0     Long        null
	float           0.0   Float       null
	double          0.0   Double      null
	char    ' '或'\u0000' Character   null
	boolean         false Boolean     null

	基本数据类型之间 可以转换 有大小关系
	包装类 没有任何关系 如果硬要说关系 就是都继承于 Number

   装箱 和 拆箱
	1装箱
		语法: jdk>=1.5 自动装箱
			包装类型 对象 = 基本数据类型;
		      jdk<1.5  手动装箱
			包装类型 对象 = new 包装类型(基本数据类型);
	
	2.拆箱
		语法: jdk>=1.5 自动拆箱
			基本数据类型 变量 = 包装类型的对象
		      jdk<1.5 手动拆箱
			基本数据类型 变量 = 包装类型的对象.xxxValue();
	所有基本数据类型的包装类 equals 比的都是值

	基本数据类型 转成 字符串
		基本数据类型 + ""
		基本数据类型包装类.toString(基本数据类型) 
			Integer.toString(10); //"10"
	字符串转成 基本数据类型
		static int parseInt(String s);
二.String
	所有类中使用最频繁的类
	字符串最大的特点:一旦被创建 就不能被改变 字符串常量
	String s = "abc"; s是一个类类型变量 "abc" 是一个对象

	常见的操作都有哪些?
		
	"abcd"

	1.获取
		1.1 获取字符串的长度
			int length() 
		1.2 根据位置 获取位置上某个字符
			char charAt(int index);
		1.3 根据字符获取该字符在字符串中的位置
			int indexOf(int ch);
			int indexOf(int ch, int fromIndex) 从fromIndex指定位置开始 获取ch在字符串中的位置
			int indexOf(String str) 
	2.判断
		2.1 字符串中是否包含某一个子串
			boolean contains(str) 
		2.2 字符串中是否有内容
			boolean isEmpty()
		2.3 字符串是否以指定内容开头
			boolean startsWith(str);
		2.4 字符串是否以指定内容结尾
			boolean endWith(str);
		2.5 比较两个字符串是否相同
			boolean equals(str);
		2.6 比较两个字符串是否相同 (忽略大小写)
			boolean equalsIgnoreCase(String anotherString) 
	3.转换
		3.1 将字符数组转换成字符串
			构造函数 String(char[])
				 String(char[],int offset,int count)
			静态方法
				static String copyValueOf(char[])
		3.2 将字符串转成字符数组
			char[] toCharArray();
		3.3 将字节数组转成字符串 (io 流再讲)
		3.4 将字符串转成字节数组 (io 流再讲)
		3.5 基本数据类型 转成 字符串
			String valueOf();
	4.替换
		4.1 替换字符中的旧字符
			String replace(char oldChar, char newChar) 
 
	5.切割
		String[] split(String regex) 
	6.截取
		String substring(int beginIndex) 
	7.转换/去空格/对两个字符串 进行自然顺序的比较
		7.1 小写转大写
			toUpperCase()
		7.2 大写转小写
			toLowerCase()
		7.3 去除两端空格
			trim()
		7.4 对两个字符串 进行自然顺序的比较
			 int compareTo(String anotherString) 
 
 
 

三.正则表达式
