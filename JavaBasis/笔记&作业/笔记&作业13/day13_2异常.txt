二.异常

1.异常的概念
	异常就是java程序在运行的过程中出现的错误 不正常的情况
	分类:
		throwable
			|--Error	错误 不可治愈的疾病
				内存溢出 java.lang.OutOfMemoryError JVM
				服务器宕机 数据库崩溃

			|--Exception	异常 可治愈的疾病
				|--受检异常   checked (编译时异常)
					只有java语言提供了checked异常 java认为checked异常都是可以被处理的异常 
					所以java程序必须显示处理checked异常 如果程序没有处理checked异常 该程序在 编译 时
					就会发生错误
						ClassNotFoundException
						NoSuchMethodException
					     io.IOException
				|--运行时异常 RuntimeExcepiton
					        NullPointerException
						ArrayIndexOutOfBoundsException
						NumberFormatException           new Integer("abc")
						ClassCastException   强转
						ArithmeticException
		java为了阅读性好 把父类名称 作为子类的后缀名 能看出是谁的小弟
2.处理异常
	JVM 默认是如何处理异常的?
		main函数收到这个问题 有两种处理方式
			a:自己将该问题处理 然后继续执行
			b:自己没有针对的处理方式 只有交给调用main 的JVM处理
			JVM 有一个默认的异常处理机制 就将该异常进行处理 
			并将该异常的名称,异常信息,异常出现的位置 打印在控制台上了
	第一种:
		try...catch...finally
	第二种:
		throws

	第一种 格式
		try{
			需要被检测的代码
		}catch(异常类 变量){
			处理异常的代码(处理方式)
		}finally{
			一定会被执行的语句
		}
	Throwable常见的方法
		a:	String	getMessage() 获取异常信息 返回字符串
		b:	String  toString() 获取异常类名和异常信息 返回字符串
		c:	void    printStackTrace() jvm默认的异常处理机制 就是调用这个方法
				打印异常在堆栈的跟踪信息
	try...catch处理异常的特殊情况

		try{
		
		}catch{
		
		}catch{
		
		}
 
3.抛出异常
	throws
	语法: 
	访问权限修饰符 返回值类型 方法名(参数列表) throws 异常1,异常2...{
		方法体
	}
	建议在方法上预先设置可能出现的异常 那么谁调用我 谁处理我


4.自定义异常
	throw
	语法:
	访问权限修饰符 返回值类型 方法名(形参列表){
		方法体

		throw 异常对象
	}
	因为在项目中会有出现特有的异常情况 这些问题java没有描述 那么就需要自定义
	1.继承于异常
		Exception 编译时异常 (必须处理)
		RuntimeException 运行时异常(如果不发生意外 可以暂时不处理)

	Exception中有一个特殊的子类异常 RuntimeException 运行时异常
	如果在函数内部抛出该异常,函数上可以不用声明,编译一样通过
	如果在函数上声明了该异常,调用者可以不用进行处理 编译一样通过

	功能定义没有错 需要在运行的时候 解决某个可能发生的问题

throws 和 throw 的区别

	throws
		用在方法声明上 跟的是异常类名
		可以跟多个异常类名,用逗号隔开
		表示抛出异常,由该方法的调用者来处理
	throw
		用在方法内,跟的是异常对象名
		只能抛出一个异常对象名
		表示抛出异常 由方法内部的语句处理
finally
	被finally控制的语句体一定会执行
	特殊情况 在执行finally之前 jvm退出了 (System.exit(1));
	作用: 用于释放资源 io 数据库

	try{
	
	}catch(){
	
	}catch(){
	
	}finally{
		一定会被执行
	}
	异常格式 记住一点 catch 用于处理异常 如果没有catch就代表异常没有被处理过
	
	try{
	
	}finally{
	
	}

面试题:
1.final finally 和 finalize的区别

	final:可以修饰类 不能被继承
		修饰方法,不能被重写
		修饰变量,只能赋值一次
	finally: 是 try语句中的一个语句体 不能单独使用 用来释放资源 一定会执行
	finalize: 是Object类中的一个方法,当垃圾回收器确定不存在该对象的等多引用时,垃圾回收器调用此方法

5.异常在继承中的特点
	1.子类重写父类方法时,子类的方法必须抛出相同的异常或者父类异常的子类异常(父亲坏了 儿子不能比父亲更坏)
	2.如果父类抛出了多个异常,子类重写父类时,只能抛出相同的异常或者父类异常的子类异常
		子类不能抛出父类没有的异常
	3.如果被重写的方法没有异常抛出,那么子类的方法绝对不可以抛出异常 如果有异常 在方法内处理 try...catch

什么时候用 try..catch / throws

	区别
		后续程序需要继续运行 就 try
		后续程序不需要继续运行 就 throws
